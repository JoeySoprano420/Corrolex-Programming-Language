enum TokenType {
    ::Keyword, ::Identifier, ::Number, ::Operator, 
    ::Comment, ::Punctuation, ::End, ::Error
}

typed struct Token {
    TokenType type;
    DynamicToken value;
}

keyword_map Keywords {
    "if", "else", "while", "return", 
    "int", "float", "char" ::Keyword;
}

func isKeyword(word::str) -> bool {
    return Keywords.contains(word);
}

exception.block TokenError {
    invalidChar: "Unrecognized character in input stream";
}

method Stream.nextToken(self) -> Token {
    self.skipWhitespace();
    if self.isEnd() {
        return Token(::End, "");
    }

    let currentChar = self.peek();
    
    // Handle comments
    if currentChar == '/' and self.peekNext() == '/' {
        return self.consumeUntil('\n', asComment);
    }

    // Keywords and Identifiers
    if currentChar.isAlpha() or currentChar == '_' {
        let word = self.consumeWhile(char::isAlphaNumeric or '_');
        if isKeyword(word) {
            return Token(::Keyword, word);
        }
        return Token(::Identifier, word);
    }

    // Numbers
    if currentChar.isDigit() {
        return Token(::Number, self.consumeWhile(char::isDigit));
    }

    // Operators
    if currentChar in "+-*/=<>" {
        return Token(::Operator, self.consume());
    }

    // Punctuation
    if currentChar in ";(){}" {
        return Token(::Punctuation, self.consume());
    }

    // Error handling
    throw TokenError.invalidChar.format(currentChar);
}

import log from "logging-library";

enum TokenType {
    Keyword, Identifier, Number, Float, Complex, Operator, 
    Comment, Punctuation, End, Error, Char
}

typed struct Token {
    TokenType type;
    DynamicToken value;
}

keyword_map Keywords {
    "if", "else", "while", "return", 
    "int", "float", "char", "complex" ::Keyword;
}

// Function to check if a word is a keyword
func isKeyword(word::str) -> bool {
    return Keywords.contains(word);
}

// Exception handling for token errors
exception.block TokenError {
    invalidChar: "Unrecognized character in input stream: {0}",
    unknownKeyword: "Unknown keyword: {0}",
    malformedNumber: "Malformed number at: {0}",
    malformedFloat: "Malformed float at: {0}",
    malformedChar: "Malformed character literal at: {0}",
    malformedComplex: "Malformed complex number at: {0}",
    unexpectedEndOfInput: "Unexpected end of input during tokenization",
}

// Method to get the next token from the input stream
method Stream.nextToken(self) -> Token {
    self.skipWhitespace();

    // Check if the end of the stream is reached
    if self.isEnd() {
        log.info("End of stream reached.");
        return Token(TokenType::End, "");
    }

    // Get the current character for tokenization
    let currentChar = self.peek();
    
    // Handle single-line comments (starting with //)
    if currentChar == '/' and self.peekNext() == '/' {
        return self.consumeUntil('\n', TokenType::Comment);
    }

    // Handle multi-line comments (starting with /* and ending with */)
    if currentChar == '/' and self.peekNext() == '*' {
        return self.consumeUntil('*/', TokenType::Comment);
    }

    // Handle keywords and identifiers
    if currentChar.isAlpha() or currentChar == '_' {
        let word = self.consumeWhile(char::isAlphaNumeric or '_');
        if isKeyword(word) {
            log.info("Keyword found: {0}", word);
            return Token(TokenType::Keyword, word);
        }
        log.info("Identifier found: {0}", word);
        return Token(TokenType::Identifier, word);
    }

    // Handle numbers (with error handling for malformed numbers)
    if currentChar.isDigit() {
        let number = self.consumeWhile(char::isDigit);
        if self.peek() == '.' {
            return self.consumeFloat(number);
        }
        if !number.isValidNumber() {
            throw TokenError.malformedNumber.format(number);
        }
        log.info("Number found: {0}", number);
        return Token(TokenType::Number, number);
    }

    // Handle floating point numbers
    if currentChar == '.' {
        let number = self.consumeWhile(char::isDigit);
        if !number.isValidFloat() {
            throw TokenError.malformedFloat.format(number);
        }
        log.info("Floating point number found: {0}", number);
        return Token(TokenType::Float, number);
    }

    // Handle complex numbers (e.g., 3.0 + 4.0i)
    if currentChar.isDigit() or currentChar == '-' or currentChar == '+' {
        let realPart = self.consumeWhile(char::isDigit or '.');
        if self.peek() == '+' or self.peek() == '-' {
            let imaginaryPart = self.consumeWhile(char::isDigit or '.');
            if self.peek() == 'i' {
                self.consume();  // Consume 'i' for complex number
                let complexNumber = realPart + self.peek() + imaginaryPart + 'i';
                log.info("Complex number found: {0}", complexNumber);
                return Token(TokenType::Complex, complexNumber);
            } else {
                throw TokenError.malformedComplex.format(realPart + "+" + imaginaryPart);
            }
        }
    }

    // Handle character literals (e.g., 'a', '1', '\\n')
    if currentChar == '\'' {
        return self.consumeCharLiteral();
    }

    // Handle operators (+, -, *, /, =, <, >)
    if currentChar in "+-*/=<>" {
        return Token(TokenType::Operator, self.consume());
    }

    // Handle punctuation (semicolon, parentheses, braces)
    if currentChar in ";(){}" {
        return Token(TokenType::Punctuation, self.consume());
    }

    // Error handling for unrecognized characters
    throw TokenError.invalidChar.format(currentChar);
}

// Method to consume characters until a specific character or sequence is found
method Stream.consumeUntil(stopChar::char, tokenType::TokenType) -> Token {
    let content = "";
    while !self.isEnd() and self.peek() != stopChar {
        content += self.consume();
    }
    if self.peek() == stopChar {
        content += self.consume();  // Consume the stop character (e.g., '\n' for comments)
    }
    log.info("Comment token found: {0}", content);
    return Token(tokenType, content);
}

// Method to consume a floating-point number
method Stream.consumeFloat(initialNumber::str) -> Token {
    let number = initialNumber;
    if self.peek() == '.' {
        number += self.consume();  // Consume the dot
    }
    number += self.consumeWhile(char::isDigit);
    
    // Optional: Handle scientific notation (e.g., 2e3, 3.14e-2)
    if self.peek() in "eE" {
        number += self.consume();  // Consume 'e' or 'E'
        if self.peek() in "+-" {
            number += self.consume();  // Consume the sign
        }
        number += self.consumeWhile(char::isDigit);
    }

    if !number.isValidFloat() {
        throw TokenError.malformedFloat.format(number);
    }

    log.info("Floating-point number token found: {0}", number);
    return Token(TokenType::Float, number);
}

// Method to consume a character literal (e.g., 'a', '1', '\\n')
method Stream.consumeCharLiteral() -> Token {
    let charLiteral = "";
    self.consume();  // Consume the opening quote (')

    while !self.isEnd() and self.peek() != '\'' {
        let char = self.consume();
        if char == '\\' {
            char = self.consumeEscapeSequence();
        }
        charLiteral += char;
    }

    if self.peek() == '\'' {
        charLiteral += self.consume();  // Consume the closing quote
    } else {
        throw TokenError.malformedChar.format(charLiteral);
    }

    log.info("Character literal found: {0}", charLiteral);
    return Token(TokenType::Char, charLiteral);
}

// Method to handle escape sequences in character literals
method Stream.consumeEscapeSequence() -> char {
    let escapeChar = self.consume();  // Consume the backslash
    match escapeChar {
        'n' -> return '\n';
        't' -> return '\t';
        'r' -> return '\r';
        'b' -> return '\b';
        '0' -> return '\0';
        _ -> throw TokenError.invalidChar.format("\\" + escapeChar);
    }
}
