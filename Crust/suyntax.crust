fn superlative_loop_example() {
    let mut result = None;

    loop {
        result = match (condition_a(), condition_b(), condition_c()) {
            (true, _, _) => Some("A is best-case"),
            (_, true, _) => Some("B is fallback"),
            (_, _, true) => Some("C is final"),
            _ => None,
        };

        // Break the loop if a valid result is found
        if let Some(res) = result {
            println!("Result: {}", res);
            break;
        }
    }
}

fn progressive_derivative_example<F>(f: F, x: f64, dx: f64) -> f64 
where
    F: Fn(f64) -> f64,
{
    let first_derivative = (f(x + dx) - f(x)) / dx;
    let second_derivative = (f(x + 2.0 * dx) - 2.0 * f(x + dx) + f(x)) / (dx * dx);

    println!("First Derivative: {}", first_derivative);
    println!("Second Derivative: {}", second_derivative);

    // Return combined derivative analysis
    first_derivative + 0.5 * second_derivative
}

// Usage
fn main() {
    let derivative = progressive_derivative_example(|x| x.powi(2), 2.0, 0.01);
    println!("Progressive Derivative Result: {}", derivative);
}

fn evaluate_system_load(cpu: f64, network: f64, disk: f64) {
    let priority = match (cpu > 80.0, network > 100.0, disk > 90.0) {
        (true, _, _) => "Scale CPU",
        (_, true, _) => "Reduce Network Load",
        (_, _, true) => "Free Disk Space",
        _ => "System Stable",
    };

    println!("System Action: {}", priority);
}

fn predict_threshold_crossing(rate: f64, current: f64, threshold: f64) -> bool {
    let derivative = (threshold - current) / rate; // Time to threshold
    derivative < 1.0 // If time to threshold is less than 1 cycle
}

fn main() {
    evaluate_system_load(85.0, 90.0, 95.0);

    if predict_threshold_crossing(5.0, 70.0, 80.0) {
        println!("Action Needed: CPU Load Escalating");
    }
}

